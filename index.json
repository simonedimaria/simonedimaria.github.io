[{"content":"","date":"12 January 2025","externalUrl":null,"permalink":"/","section":"","summary":"","title":"","type":"page"},{"content":"","date":"12 January 2025","externalUrl":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":"","date":"12 January 2025","externalUrl":null,"permalink":"/tags/dns-rebinding/","section":"Tags","summary":"","title":"DNS Rebinding","type":"tags"},{"content":" TLDR # The challenge consisted in exploiting a race condition by using DNS rebinding to bypass URL.equals() check in Java.\nDescription # I made a service to convert webhooks into webhooks.\nSource code analysis # Upon extracting the challenge attachments, it will present itself as a Kotlin-based Spring Boot application with minimal code support.\nIn fact the only relevant files to us are WebwebhookhookApplication.kt , State.kt and controller/MainController.kt.\nState.kt\n1package tf.irisc.chal.webwebhookhook 2 3import java.net.URI 4import java.net.URL 5 6class StateType( 7 hook: String, 8 var template: String, 9 var response: String 10 ) { 11 var hook: URL = URI.create(hook).toURL() 12} 13 14object State { 15 var arr = ArrayList\u0026lt;StateType\u0026gt;() 16} The StateType class is being defined to store an hook URL, a mutable template string and a mutable response string. Note that in the constructor, the hook declaration is being shadowed by var hook: URL = URI.create(hook).toURL(), meaning that it will accept hook parameter as string but it\u0026rsquo;ll be casted as an URL object immediately.\nThe StateType class is later used as Collection argument for ArrayList stored inside State.arr.\nThe State object is defined as singleton, meaning there is exactly one instance of State in the entire application.\nThis pattern effectively gives the application a simple in-memory database of all registered hooks and their associated templates.\nWebwebhookhookApplication.kt\n1package tf.irisc.chal.webwebhookhook 2 3import org.springframework.boot.autoconfigure.SpringBootApplication 4import org.springframework.boot.runApplication 5 6@SpringBootApplication 7class WebwebhookhookApplication 8 9const val FLAG = \u0026#34;irisctf{test_flag}\u0026#34;; 10 11fun main(args: Array\u0026lt;String\u0026gt;) { 12 State.arr.add(StateType( 13 \u0026#34;http://example.com/admin\u0026#34;, 14 \u0026#34;{\\\u0026#34;data\\\u0026#34;: _DATA_, \\\u0026#34;flag\\\u0026#34;: \\\u0026#34;\u0026#34; + FLAG + \u0026#34;\\\u0026#34;}\u0026#34;, 15 \u0026#34;{\\\u0026#34;response\\\u0026#34;: \\\u0026#34;ok\\\u0026#34;}\u0026#34;)) 16 runApplication\u0026lt;WebwebhookhookApplication\u0026gt;(*args) 17} This is the main entry point for the Application. Here an entry is being added in the global State object, using:\nhttp://example.com/admin as value for the hook parameter. {\u0026quot;data\u0026quot;: _DATA_, \u0026quot;flag\u0026quot;: \u0026quot;irisctf{test_flag}\u0026quot;} as value for the template string. {\u0026quot;response\u0026quot;: \u0026quot;ok\u0026quot;} as value for the response string. Let\u0026rsquo;s analyze the application further to understand how we might be able to read that flag.\ncontroller/MainController.kt\n1package tf.irisc.chal.webwebhookhook.controller 2 3import org.springframework.http.MediaType 4import org.springframework.stereotype.Controller 5import org.springframework.ui.Model 6import org.springframework.web.bind.annotation.* 7import tf.irisc.chal.webwebhookhook.State 8import tf.irisc.chal.webwebhookhook.StateType 9import java.net.HttpURLConnection 10import java.net.URI 11 12@Controller 13class MainController { 14 15 @GetMapping(\u0026#34;/\u0026#34;) 16 fun home(model: Model): String { 17 return \u0026#34;home.html\u0026#34; 18 } 19 20 @PostMapping(\u0026#34;/webhook\u0026#34;) 21 @ResponseBody 22 fun webhook(@RequestParam(\u0026#34;hook\u0026#34;) hook_str: String, @RequestBody body: String, @RequestHeader(\u0026#34;Content-Type\u0026#34;) contentType: String, model: Model): String { 23 var hook = URI.create(hook_str).toURL(); 24 for (h in State.arr) { 25 if(h.hook == hook) { 26 var newBody = h.template.replace(\u0026#34;_DATA_\u0026#34;, body); 27 var conn = hook.openConnection() as? HttpURLConnection; 28 if(conn === null) break; 29 conn.requestMethod = \u0026#34;POST\u0026#34;; 30 conn.doOutput = true; 31 conn.setFixedLengthStreamingMode(newBody.length); 32 conn.setRequestProperty(\u0026#34;Content-Type\u0026#34;, contentType); 33 conn.connect() 34 conn.outputStream.use { os -\u0026gt; 35 os.write(newBody.toByteArray()) 36 } 37 38 return h.response 39 } 40 } 41 return \u0026#34;{\\\u0026#34;result\\\u0026#34;: \\\u0026#34;fail\\\u0026#34;}\u0026#34; 42 } 43 44 @PostMapping(\u0026#34;/create\u0026#34;, consumes = [MediaType.APPLICATION_JSON_VALUE]) 45 @ResponseBody 46 fun create(@RequestBody body: StateType): String { 47 for(h in State.arr) { 48 if(body.hook == h.hook) 49 return \u0026#34;{\\\u0026#34;result\\\u0026#34;: \\\u0026#34;fail\\\u0026#34;}\u0026#34; 50 } 51 State.arr.add(body) 52 return \u0026#34;{\\\u0026#34;result\\\u0026#34;: \\\u0026#34;ok\\\u0026#34;}\u0026#34; 53 } 54} The router for the Spring Boot Application is configured to have the /create and the /webhook endpoints.\nThe /create endpoint accepts POST requests with application/json body that will be casted as StateType. Then it checks if an entry with same hook is already occurring in the global State object, and if so, it will return a json response of {\u0026quot;result\u0026quot;: \u0026quot;fail\u0026quot;}. After iterating the ArrayList, if no matching instances were found, a new StateType entry will be appended.\nEssentially, this endpoint registers a new webhook configuration, unless it already exists. The /webhook endpoint will accept POST requests with a hook parameter. It will iterate over the State.arr global list of previously created webhook configurations, and if it finds a matching hook URL, it will replace the _DATA_ placeholder in the template with the content of the supplied body, and send a POST request to the given hook URL using HttpURLConnection with the new body. If the hook URL is not found in the State.arr, it will return a json response of {\u0026quot;result\u0026quot;: \u0026quot;fail\u0026quot;}. Note that both the endpoints do not provide SSRF protections, however it\u0026rsquo;s irrelevant for us as there are no additional services running on the server.\nIdentifying the vulnerability # At first glance, there doesn\u0026rsquo;t seem to be an obvious way to intercept the flag, since the only way would be to successfully match the check hook and send the POST to example.org, which would be ez game if we were the admins of domain, which is not the case :P.\nOne of my first steps was to try an HTTP smuggling, given the arbitrary control over the body that then replaces the content of _DATA_, to build a request like this:\nSmuggling/Desync attempt on body content. However, we note how the body of the request is correctly set based on the length of our payload at L31 with conn.setFixedLengthStreamingMode(newBody.length) consequently failing to delimit the stream of the request to build a new one. Furthermore, it is not possible to override the request headers and in any case it would be a matter of exploiting a Spring Boot HTTP desync but today will not be the day of 0-days :/\nFinally, in a scenario of arbitrary write in the system we could have tried to overwrite /etc/hosts to override the DNS resolution of example.org and make it point to an IP under our control, but again, this is not the case for the challenge.\nExploitation # irisctf{url_equals_rebind}\n","date":"12 January 2025","externalUrl":null,"permalink":"/posts/irisctf-2025/webwebhookhook/","section":"Blog","summary":"Writeup for webwebhookhook web challenge of IrisCTF 2025","title":"IrisCTF 2025 - webwebhookhook","type":"posts"},{"content":"","date":"12 January 2025","externalUrl":null,"permalink":"/tags/race-condition/","section":"Tags","summary":"","title":"Race Condition","type":"tags"},{"content":"","date":"12 January 2025","externalUrl":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"},{"content":"","date":"12 January 2025","externalUrl":null,"permalink":"/categories/web/","section":"Categories","summary":"","title":"Web","type":"categories"},{"content":"","date":"12 January 2025","externalUrl":null,"permalink":"/tags/writeup/","section":"Tags","summary":"","title":"Writeup","type":"tags"},{"content":"","date":"10 January 2025","externalUrl":null,"permalink":"/tags/blogpost/","section":"Tags","summary":"","title":"Blogpost","type":"tags"},{"content":"Welcome to my personal blog!\n","date":"10 January 2025","externalUrl":null,"permalink":"/posts/first_post/","section":"Blog","summary":"","title":"First blog post","type":"posts"},{"content":"Welcome to my personal blog!\n","date":"10 January 2024","externalUrl":null,"permalink":"/posts/","section":"Blog","summary":"","title":"Blog","type":"posts"},{"content":"","externalUrl":null,"permalink":"/about/","section":"","summary":"","title":"","type":"page"},{"content":"","externalUrl":null,"permalink":"/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"},{"content":"","externalUrl":null,"permalink":"/events/","section":"Events","summary":"","title":"Events","type":"events"},{"content":"","externalUrl":null,"permalink":"/series/","section":"Series","summary":"","title":"Series","type":"series"}]